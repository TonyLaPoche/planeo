'use client';

import { Edit, Trash2 } from 'lucide-react';
import { User, Shift } from '@/types';

interface CalendarGridProps {
  calendarDays: (string | null)[];
  getShiftsForDate: (date: string) => Shift[];
  getUserById: (userId: string) => User | undefined;
  onDateClick: (date: string) => void;
  onEditShift: (shift: Shift) => void;
  onDeleteShift: (shiftId: string) => void;
  onShiftClick?: (shift: Shift) => void;
}

export function CalendarGrid({
  calendarDays,
  getShiftsForDate,
  getUserById,
  onDateClick,
  onEditShift,
  onDeleteShift,
  onShiftClick,
}: CalendarGridProps) {
  return (
    <div className="bg-white rounded-lg shadow-sm border overflow-x-auto md:overflow-hidden">
      {/* Days of week header - Enhanced Visibility */}
      <div className="min-w-max md:min-w-0">
        <div className="grid grid-cols-7 md:grid-cols-6 w-[28rem] md:w-auto bg-gradient-to-r from-blue-600 to-purple-600 border-b-4 border-blue-700 shadow-md">
          {['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'].map((fullDay, index) => (
            <div
              key={fullDay}
              className={`px-2 sm:px-4 py-4 sm:py-5 text-center font-bold text-white border-r border-blue-500 md:last:border-r-0 ${
                index === 0 ? 'md:hidden' : '' // Masquer dimanche sur desktop
              }`}
              title={fullDay}
            >
              <span className="hidden sm:inline text-sm sm:text-base">{fullDay}</span>
              <span className="sm:hidden text-lg">{fullDay.charAt(0)}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Calendar days - Mobile-First & Accessible */}
      <div className="min-w-max md:min-w-0">
        <div className="grid grid-cols-7 md:grid-cols-6 w-[28rem] md:w-auto">
        {calendarDays.map((dateStr, index) => {
          const dayShifts = dateStr ? getShiftsForDate(dateStr) : [];
          const hasShifts = dayShifts.length > 0;

          // V√©rifier si c'est un dimanche (index % 7 === 0 dans une grille 7 colonnes)
          const isSunday = index % 7 === 0;

          return (
            <div
              key={index}
              className={`min-h-[160px] sm:min-h-[160px] lg:min-h-[180px] border-r border-b md:last:border-r-0 p-2 sm:p-3 relative ${
                isSunday ? 'md:hidden' : '' // Masquer dimanche sur desktop
              } ${
                dateStr
                  ? `hover:bg-blue-50 cursor-pointer active:bg-blue-100 transition-all duration-200 ${
                      hasShifts ? 'bg-blue-50/30 border-blue-200' : 'hover:border-blue-300'
                    }`
                  : 'bg-gray-50/50'
              }`}
              onClick={() => dateStr && onDateClick(dateStr)}
              role={dateStr ? "button" : undefined}
              tabIndex={dateStr ? 0 : undefined}
              aria-label={
                dateStr
                  ? `${new Date(dateStr).toLocaleDateString('fr-FR', {
                      weekday: 'long',
                      day: 'numeric',
                      month: 'long'
                    })}${
                      hasShifts
                        ? ` - ${dayShifts.length} cr√©neau${dayShifts.length > 1 ? 'x' : ''}`
                        : ' - Aucun cr√©neau'
                    }`
                  : undefined
              }
              onKeyDown={(e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                  e.preventDefault();
                  if (dateStr) {
                    onDateClick(dateStr);
                  }
                }
              }}
            >
              {dateStr && (
                <>
                  {/* Date Header with Shift Indicator - Plus lisible sur mobile */}
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-base sm:text-lg font-bold text-gray-900 bg-gray-50 rounded w-7 h-7 sm:w-8 sm:h-8 flex items-center justify-center">
                      {new Date(dateStr).getDate()}
                    </div>
                    {hasShifts && (
                      <div className="flex items-center gap-1 bg-blue-500 text-white px-1.5 py-0.5 rounded text-xs font-semibold">
                        <div className="w-1.5 h-1.5 bg-white rounded-full animate-pulse" aria-hidden="true"></div>
                        <span>{dayShifts.length}</span>
                      </div>
                    )}
                  </div>

                  {/* Shifts List - Plus espac√© pour mobile */}
                  <div className="space-y-2 sm:space-y-2">
                    {dayShifts.slice(0, 3).map((shift) => {
                      const user = getUserById(shift.userId);
                      const isAutoGenerated = shift.notes?.includes('g√©n√©r√© automatiquement') || shift.notes?.includes('Cr√©neau auto g√©n√©r√©');

                      return (
                        <div
                          key={shift.id}
                          className={`bg-white border-2 rounded-md p-2 shadow-sm hover:shadow-md transition-all duration-200 ${
                            !isAutoGenerated && onShiftClick ? 'cursor-pointer' : ''
                          }`}
                          style={{
                            borderColor: user?.color || '#3b82f6',
                            backgroundColor: user?.color ? `${user.color}15` : '#ffffff',
                            boxShadow: `0 2px 4px -1px ${user?.color || '#3b82f6'}15`
                          }}
                          onClick={(e) => {
                            if (!isAutoGenerated && onShiftClick) {
                              e.stopPropagation();
                              e.preventDefault();
                              onShiftClick(shift);
                            }
                          }}
                          title={!isAutoGenerated && onShiftClick ? 'Cliquer pour voir les d√©tails' : undefined}
                        >
                          <div className="flex items-start justify-between gap-2">
                            <div className="flex-1 min-w-0">
                              {/* Nom de l'employ√© - Plus visible sur mobile */}
                              <div className="flex items-center gap-1.5 mb-1.5">
                                <div
                                  className="w-3 h-3 rounded-full flex-shrink-0"
                                  style={{ backgroundColor: user?.color || '#3b82f6' }}
                                />
                                <div
                                  className="font-bold text-base leading-tight"
                                  style={{ color: user?.color || '#1f2937' }}
                                >
                                  {user?.name}
                                </div>
                              </div>

                              {/* Horaires - Plus visibles sur mobile */}
                              <div className="flex items-center gap-1.5 text-sm font-semibold text-gray-800">
                                <span className="text-gray-600 text-base">üïê</span>
                                <span className="bg-white px-1.5 py-0.5 rounded text-sm font-mono border-2 border-gray-300">
                                  {shift.startTime}-{shift.endTime}
                                </span>
                              </div>

                              {/* Notes si pr√©sentes - Compactes pour gagner de l'espace */}
                              {shift.notes && (
                                <div className="text-xs text-gray-600 mt-1 p-1 bg-gray-50 rounded border-l-2 border-gray-300 truncate">
                                  üìù {shift.notes}
                                </div>
                              )}
                            </div>

                            {/* Boutons d'action - Plus visibles sur mobile */}
                            <div className="flex flex-col gap-1 flex-shrink-0">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  onEditShift(shift);
                                }}
                                className="w-8 h-8 flex items-center justify-center bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-all duration-200 shadow-md hover:shadow-lg touch-manipulation"
                                aria-label={`Modifier le cr√©neau de ${user?.name}`}
                              >
                                <Edit className="h-4 w-4" />
                              </button>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  onDeleteShift(shift.id);
                                }}
                                className="w-8 h-8 flex items-center justify-center bg-red-500 hover:bg-red-600 text-white rounded-md transition-all duration-200 shadow-md hover:shadow-lg touch-manipulation"
                                aria-label={`Supprimer le cr√©neau de ${user?.name}`}
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        </div>
                      );
                    })}

                    {/* Show more indicator - Compact */}
                    {dayShifts.length > 3 && (
                      <div className="text-xs text-center font-medium bg-blue-50 text-blue-700 border border-blue-200 rounded px-2 py-1">
                        <span>+{dayShifts.length - 3} autres</span>
                      </div>
                    )}

                    {/* Empty state for days with no shifts - Compact */}
                    {dayShifts.length === 0 && (
                      <div className="flex flex-col items-center justify-center py-2 text-gray-500">
                        <div className="text-lg mb-1">üìÖ</div>
                        <div className="text-xs font-medium text-center">
                          Aucun cr√©neau
                        </div>
                      </div>
                    )}
                  </div>
                </>
              )}
            </div>
          );
        })}
        </div>
      </div>
    </div>
  );
}
