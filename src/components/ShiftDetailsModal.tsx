'use client';

import { Shift, User } from '@/types';
import { X, Clock, User as UserIcon, Calendar, FileText, AlertCircle } from 'lucide-react';
import { calculateShiftDuration } from '@/utils/time';

interface ShiftDetailsModalProps {
  isOpen: boolean;
  shift: Shift | null;
  user: User | null;
  onClose: () => void;
}

export function ShiftDetailsModal({ isOpen, shift, user, onClose }: ShiftDetailsModalProps) {
  if (!isOpen || !shift || !user) return null;

  const duration = calculateShiftDuration(shift);
  const isAutoGenerated = shift.notes?.includes('généré automatiquement') || shift.notes?.includes('Créneau auto généré');

  // Si c'est un créneau auto-généré, ne pas afficher la modal
  if (isAutoGenerated) {
    return null;
  }

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 p-4" style={{
      backgroundColor: 'rgba(0, 0, 0, 0.2)',
      backdropFilter: 'blur(4px)',
      WebkitBackdropFilter: 'blur(4px)' // Safari support
    }} onClick={onClose}>
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">
            Détails du créneau
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            aria-label="Fermer la modal"
          >
            <X className="h-5 w-5 text-gray-500" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Employee Info */}
          <div className="flex items-center gap-3">
            <div
              className="w-4 h-4 rounded-full flex-shrink-0"
              style={{ backgroundColor: user.color }}
            />
            <div className="flex items-center gap-2">
              <UserIcon className="h-5 w-5 text-gray-500" />
              <span className="font-semibold text-lg" style={{ color: user.color }}>
                {user.name}
              </span>
            </div>
          </div>

          {/* Date */}
          <div className="flex items-center gap-3">
            <Calendar className="h-5 w-5 text-gray-500" />
            <span className="text-gray-900">
              {new Date(shift.date).toLocaleDateString('fr-FR', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </span>
          </div>

          {/* Time */}
          <div className="flex items-center gap-3">
            <Clock className="h-5 w-5 text-gray-500" />
            <div className="flex items-center gap-2">
              <span className="font-mono text-lg bg-gray-100 px-3 py-1 rounded">
                {shift.startTime} - {shift.endTime}
              </span>
              <span className="text-sm text-gray-600">
                ({duration}h)
              </span>
            </div>
          </div>

          {/* Break Duration */}
          {shift.breakDuration > 0 && (
            <div className="flex items-center gap-3">
              <AlertCircle className="h-5 w-5 text-orange-500" />
              <span className="text-gray-700">
                Pause : {shift.breakDuration} minutes
              </span>
            </div>
          )}

          {/* Notes */}
          {shift.notes && (
            <div className="border-t border-gray-200 pt-4">
              <div className="flex items-start gap-3">
                <FileText className="h-5 w-5 text-gray-500 mt-0.5" />
                <div className="flex-1">
                  <h3 className="font-medium text-gray-900 mb-2">Commentaire :</h3>
                  <div className="bg-gray-50 p-3 rounded-md border-l-4 border-blue-500">
                    <p className="text-gray-700 whitespace-pre-wrap">
                      {shift.notes}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* No notes */}
          {!shift.notes && (
            <div className="border-t border-gray-200 pt-4">
              <div className="flex items-center gap-3 text-gray-500">
                <FileText className="h-5 w-5" />
                <span>Aucun commentaire pour ce créneau</span>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex justify-end gap-3 p-6 border-t border-gray-200 bg-gray-50">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
          >
            Fermer
          </button>
        </div>
      </div>
    </div>
  );
}
